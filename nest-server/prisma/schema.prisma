// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String
  identity    String

  consumers   Consumer[]
  merchants   Merchant[]

  @@map("users")
}

// relationship with consumer

model Consumer {
  id                Int      @id @default(autoincrement())
  users             Users    @relation(fields: [users_id], references: [id])
  users_id          Int      @map("users_id")
  QRcode            String
  consumer_name     String  
  consumer_phone    String

  wishlist_products Wishlist_product[]
  feedbacks         Feedback[]

  @@map("consumer")
}


model Order {
  id                Int      @id @default(autoincrement())
  consumer_QRcode   String
  item              Item     @relation(fields: [item_id], references: [id])
  item_id           Int      @map("item_id")
  amount            Int
  order_status      Boolean
  payment           Int
  create_time       DateTime @default(now()) @db.Date

  @@map("orders")
}



model Feedback {
  id                Int      @id @default(autoincrement())
  consumer          Consumer @relation(fields: [consumer_id], references: [id])
  consumer_id       Int      @map("conumber_id")
  merchant          Merchant @relation(fields: [merchant_id], references: [id])
  merchant_id       Int      @map("merchant_id")
  rating            Int?     
  comment           String?
  create_time       DateTime @default(now()) @db.Date

  @@map("feedback")
}



model Platform {
  id                Int      @id @default(autoincrement())
  platform          String

  products          Product[]

  @@map("platform")
}


model Product {
  id                Int      @id @default(autoincrement())
  product_name      String
  product_status    Boolean
  product_image     String
  release_date      DateTime @default(now()) @db.Date
  product_intro     String
  view              Int
  platform          Platform @relation(fields: [platform_id], references: [id])
  platform_id       Int      @map("platform_id")

  versions          Version[]
  wishlist_products Wishlist_product[]
  hots              Hot[]
  product_tags      Product_tag[] 

  @@map("product")
}



model Version {
  id                Int      @id @default(autoincrement())
  product           Product  @relation(fields: [product_id], references: [id])
  product_id        Int      @map("product_id")
  version           String
  version_image     String

  items             Item[]
  wishlist_products Wishlist_product[]

  @@map("version")
}

model Hot {
  id                Int      @id @default(autoincrement())
  product           Product  @relation(fields: [product_id], references: [id])
  product_id        Int      @map("product_id")

  @@map("hot")
}

model Tag {
  id                Int      @id @default(autoincrement())
  tag               String

  product_tags      Product_tag[]

  @@map("tag")
}

model Product_tag {
  id                Int      @id @default(autoincrement())
  product           Product  @relation(fields: [product_id], references: [id])
  product_id        Int      @map("product_id")
  tag               Tag      @relation(fields: [tag_id], references: [id])
  tag_id            Int      @map("tag_id")

  @@map("product_tag")
}


model Item {
  id                Int      @id @default(autoincrement())
  merchant          Merchant @relation(fields: [merchant_id], references: [id])          
  merchant_id       Int      @map("merchant_id")
  version           Version  @relation(fields: [version_id], references: [id])
  version_id        Int      @map("version_id")
  price             Int
  end_date          DateTime? @default(now()) @db.Date
  stock_status      String
  availability      Boolean @default(true)

  orders            Order[]

  @@map("item")
}




model Wishlist_product {
  id                Int      @id @default(autoincrement())
  consumer          Consumer @relation(fields: [consumer_id], references: [id])
  consumer_id       Int      @map("consumer_id")
  product           Product  @relation(fields: [product_id], references: [id])
  product_id        Int      @map("product_id")
  version           Version  @relation(fields: [version_id], references: [id])
  version_id        Int      @map("version_id")
  target_price      Int
  notification      Boolean

  @@map("wishlist_product")
}







// relationship with merchant

model Merchant {
  id                Int      @id @default(autoincrement())
  users             Users    @relation(fields: [users_id], references: [id])
  users_id          Int      @map("users_id")
  merchant_image    Bytes    @default("")
  merchant_name     String
  merchant_phone    String
  biz_registration  Bytes    @default("")
  district          District @relation(fields: [district_id], references: [id])
  district_id       Int      @map("district_id")
  address           String
  bank_account      String   @default("")
  branch            Branch   @relation(fields: [branch_id], references: [id])
  branch_id         Int      @map("branch_id")
  opening_hour      String
  announcement      String?


  feedbacks         Feedback[]
  items             Item[]
  
  @@map("merchant")
}

model District {
  id                Int      @id @default(autoincrement())
  area              Area     @relation(fields: [area_id], references: [id])
  area_id           Int      @map("area_id")
  district          String

  merchants         Merchant[]

  @@map("district")
}

model Area {
  id                Int      @id @default(autoincrement())
  area              String

  districts         District[]

  @@map("area")
}


// model Bank_acc {
//   id                Int      @id @default(autoincrement())
//   branch            Branch   @relation(fields: [branch_id], references: [id])
//   branch_id         Int      @map("branch_id")
//   account_number    String

  


//   @@map("bank_acc")
// }

model Branch {
  id                Int      @id @default(autoincrement())
  bank              Bank     @relation(fields: [bank_id], references: [id])
  bank_id           Int      @map("bank_id")
  branch_code       String
  branch_name       String


  merchants         Merchant[]
  @@map("branch")
}

model Bank {
  id                Int      @id @default(autoincrement())
  bank_code         String
  bank_name         String

  branchs           Branch[]

  @@map("bank")
}

